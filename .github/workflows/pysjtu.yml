name: PySJTU Tests

on: [ push, pull_request ]

jobs:
  test:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.8", "3.9", "3.10" ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0b2
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Mac dependencies
        if: startsWith(runner.os, 'macOS')
        uses: mstksg/get-package@v1
        with:
          brew: libomp

      - name: Install dependencies
        run: poetry install

      - name: Test if no syntax error
        if: matrix.os != 'macos-latest' # flake8 is extremely slow on macOS due to multiprocessing disabled
        run: poetry run flake8 . --exclude .venv --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Test with pytest
        run: poetry run pytest --cov-report xml --cov=pysjtu

      - name: Setup Java JDK
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.7' && github.repository == 'PhotonQuantum/pysjtu'
        uses: actions/setup-java@v2
        with:
          # The Java version to make available on the path. Takes a whole or semver Java version, or 1.x syntax (e.g. 1.8 => Java 8.x)
          java-version: 8
          # The package type (jre, jdk, jdk+fx)
          java-package: jre
          distribution: 'liberica'

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.8' && github.repository == 'PhotonQuantum/pysjtu'
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_COVERAGE_TOKEN }}
        run: |
          curl -LS -o codacy-coverage-reporter-assembly.jar "$(curl -LSs https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | endswith(".jar"))) | .[0].browser_download_url')"
          java -jar codacy-coverage-reporter-assembly.jar report -l Python -r coverage.xml
